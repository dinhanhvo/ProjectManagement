version: '3.8'

services:
  mysql8-container:
    container_name: mysql8-container
    image: mysql:8.2.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Ldb@2025
      MYSQL_DATABASE: ProjectManagement
    ports:
      - 3307:3306
    #volumes:
    #- ./sql/prime.sql:/docker-entrypoint-initdb.d/init-script.sql
    networks:
      - prime-network
  phpmyadmin8-container:
    #intel host
    image: phpmyadmin/phpmyadmin
    #image: arm64v8/phpmyadmin #choose this if you are running on Mac Apple Silicon(M1, M2,...)
    container_name: phpmyadmin8-container
    restart: always
    depends_on:
      - mysql8-container
    ports:
      - "8100:80" #port mapping
    environment:
      PMA_HOST: mysql8-container #phpMyAdmin Host, PMA = PHP My Amin
      PMA_PORT: 3306
      UPLOAD_LIMIT: 500M
    networks:
      - prime-network
  redis:
    image: docker.io/redis:7.2.3
    container_name: redis
    restart: always
    ports:
      - "6379:6379" # Port mapping for Redis, you can change the host port as needed
    volumes:
      - ./redis-data:/data # Mount a volume for Redis data persistence
    networks:
      - prime-network
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - ELASTIC_PASSWORD=123
#      - pack.security.enabled=true
#      - pack.security.transport.ssl.enabled=true
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - prime-network
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.13
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - prime-network
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.13
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      - ELASTICSEARCH_API_KEY=U8Lq3WBqQ5-42cXWhDea0g
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - prime-network
  prime-spring-container:
    image: prime-service-image
    container_name: prime-spring-container
    build:
      context: .
      dockerfile: Dockerfile
      #docker tag <image_id> prime-spring:1.0.0
    ports:
      - "8088:8088"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/ProjectManagement?serverTimezone=UTC&allowPublicKeyRetrieval=true
      MYSQL_ROOT_PASSWORD: Ldb@2025
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 5044
      #Kafka broker
    #      KAFKA_BROKER_SERVER: kafka-broker-01
    #      KAFKA_BROKER_PORT: 19092
    networks:
      - prime-network
    #depends_on only waits for the container to start, not for the service inside the container to be fully operational
    depends_on:
      - mysql8-container
      - redis
      - logstash
volumes:
  es_data:
    driver: local
networks:
  prime-network:
    name: prime-network
    driver: bridge

#curl -u elastic:123 -X POST "http://localhost:9200/_security/service/your-service-account-name/token" -H 'Content-Type: application/json' -d'
#  {
#    "expiration": "1d"
#  }'
